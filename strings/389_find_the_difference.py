import unittest
from collections import Counter

"""

You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.

Constraints:

0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lowercase English letters.

"""


class Solution:
    def findTheDifference(self, s: str, t: str) -> str:

        # s, t= Counter(s), Counter(t)
        # for k,v in t.items():
        #     if (k not in s) or t[k] != s[k]: return k

        bit_s, bit_t = 0, 0

        for i in range(len(s)):
            bit_s = bit_s ^ ord(s[i])

        for i in range(len(t)):
            bit_t = bit_t ^ ord(t[i])

        return chr((bit_t ^ bit_s))


class TestSolution(unittest.TestCase):

    def test_findTheDifference(self):
        solution = Solution()

        # Test case 1: Added character is 'e'
        s1 = "abcd"
        t1 = "abcde"
        self.assertEqual(solution.findTheDifference(s1, t1), "e")

        # Test case 2: Added character is 'z'
        s2 = "hello"
        t2 = "helloz"
        self.assertEqual(solution.findTheDifference(s2, t2), "z")

        # Test case 3: Added character is 'A'
        s3 = "openai"
        t3 = "openaiA"
        self.assertEqual(solution.findTheDifference(s3, t3), "A")

        # Add more test cases as needed


if __name__ == '__main__':
    unittest.main()
